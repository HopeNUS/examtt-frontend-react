{"version":3,"sources":["styles/GlobalStyle.js","constants/LGs.js","components/LGOptions.js","components/EntryForm.js","containers/MainContainer.js","serviceWorker.js","index.js","App.js"],"names":["GlobalStyle","createGlobalStyle","LGs","LGOptions","map","lg","value","EntryForm","Form","onSubmit","console","log","props","Group","controlId","Label","Control","type","placeholder","htmlFor","as","rows","Button","variant","MainContainer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"stBAEO,IAAMA,EAAcC,YAAH,K,gBCFXC,EAAM,CACf,KACA,KACA,MCASC,EAAY,WAErB,OACI,oCACKD,EAAIE,KAAI,SAACC,GACF,OAAQ,4BAAQC,MAAOD,GAAKA,QCCzC,IAAME,EAAY,WACrB,OACI,kBAACC,EAAA,EAAD,CAAMC,cALVC,QAAQC,IAAIC,IAMJ,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,UAAU,kBAClB,kBAACN,EAAA,EAAKO,MAAN,aACA,kBAACP,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOC,YAAY,gBAG1C,kBAACV,EAAA,EAAKK,MAAN,CAAYC,UAAU,8BAClB,2BAAOK,QAAQ,6BAAf,MACA,kBAACX,EAAA,EAAKQ,QAAN,CAAcI,GAAG,UACb,kBAAC,EAAD,QAIR,kBAACZ,EAAA,EAAKK,MAAN,CAAYC,UAAU,gCAClB,kBAACN,EAAA,EAAKQ,QAAN,CAAcI,GAAG,WAAWC,KAAK,OAErC,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,UAA/B,WAtBZ,IAAwBL,GCDXY,EAAgB,WACzB,OACI,oCACI,kBAACxB,EAAD,MACA,iDACA,kBAAC,EAAD,QCGNyB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BlC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLtC,QAAQsC,MAAM,4CAA6CA,M,MC1FjEC,IAASC,OAAO,mBCHG,kBAAM,kBAAC,EAAD,QDGT,MAASC,SAASC,eAAe,SDgB1C,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,iCAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,iCAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,GACHK,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLrC,QAAQC,IACN,oEArFAyD,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjC3B,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.4abea594.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n  }\n  *, *:before, *:after {\n    -webkit-box-sizing: inherit;\n            box-sizing: inherit;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n    line-height: 1;\n    color: #202020;\n    background-color: #fafafe;\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: 16px;\n  }\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n`;\n","export const LGs = [\n    'A1',\n    'A2',\n    'A3'\n];","import React from 'react';\nimport {LGs} from \"../constants/LGs\";\n\nexport const LGOptions = () => {\n\n    return (\n        <>\n            {LGs.map((lg) => {\n                    return (<option value={lg}>{lg}</option>);\n                }\n            )}\n        </>\n    );\n}","import React from 'react';\nimport { Form } from 'react-bootstrap'\nimport { Button } from 'react-bootstrap';\nimport {LGOptions} from \"./LGOptions\";\n\nfunction handleOnSubmit(props) {\n    console.log(props);\n}\n\nexport const EntryForm = () => {\n    return (\n        <Form onSubmit={handleOnSubmit()}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control type=\"name\" placeholder=\"Enter name\" />\n            </Form.Group>\n\n            <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <label htmlFor=\"exampleFormControlSelect1\">LG</label>\n                <Form.Control as=\"select\">\n                    <LGOptions/>\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Control as=\"textarea\" rows=\"7\" />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n                Submit\n            </Button>\n        </Form>\n    );\n};\n","import React from 'react';\nimport {GlobalStyle} from \"../styles/GlobalStyle\";\nimport { EntryForm } from \"../components/EntryForm\";\n\nexport const MainContainer = () => {\n    return (\n        <>\n            <GlobalStyle />\n            <h1>Exam HQ Timetable</h1>\n            <EntryForm />\n        </>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport { MainContainer } from \"./containers/MainContainer\";\n\nexport const App = () => <MainContainer />\n"],"sourceRoot":""}